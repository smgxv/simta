name: CI/CD SIMTA

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: write
  issues: write
  security-events: write

env:
  GO_VERSION: "1.23"

jobs:
  # SAST - CodeQL (GitHub Native)
  # sast-codeql:
  #   name: SAST dengan CodeQL (Go + JS)
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: 1.23

  #     - uses: github/codeql-action/init@v3
  #       with:
  #         languages: go, javascript

  #     - uses: github/codeql-action/analyze@v3
  #       with:
  #         output: codeql-results

  #     # Gate saat PUSH: bandingkan alert di commit terbaru vs commit "before"
  #     - name: Gate on CodeQL alerts (Critical) by ref
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const owner = context.repo.owner;
  #           const repo  = context.repo.repo;
  #           // Gunakan ref yang benar: branch untuk push, PR merge-ref untuk PR
  #           let ref = context.ref; // contoh: refs/heads/main
  #           if (context.eventName === 'pull_request') {
  #             ref = `refs/pull/${context.payload.pull_request.number}/merge`;
  #           }
  #           core.info(`Querying alerts for ref: ${ref}`);
  #           async function fetchAll(ref) {
  #             let page = 1, per_page = 100, out = [];
  #             while (true) {
  #               const { data } = await github.request(
  #                 'GET /repos/{owner}/{repo}/code-scanning/alerts',
  #                 { owner, repo, state: 'open', ref, tool_name: 'CodeQL', per_page, page }
  #               );
  #               out.push(...data);
  #               if (data.length < per_page) break;
  #               page++;
  #             }
  #             return out;
  #           }
  #           const alerts = await fetchAll(ref);
  #           // Ringkas per level untuk debug
  #           const level = a => (a.rule && a.rule.security_severity_level) || 'unknown';
  #           const counts = alerts.reduce((m,a)=>{ m[level(a)] = (m[level(a)]||0)+1; return m; }, {});
  #           core.info('Open alerts by level: ' + JSON.stringify(counts));
  #           const sevRank = { critical: 4, high: 3, medium: 2, low: 1, unknown: 0 };
  #           const offenders = alerts.filter(a => sevRank[level(a)] >= sevRank.critical);
  #           if (offenders.length) {
  #             const lines = offenders.slice(0, 15).map(a => {
  #               const loc = a.most_recent_instance?.location || {};
  #               return `- ${a.rule?.id} ${loc.path || ''}:${loc.start_line || ''} (${level(a)})`;
  #             }).join('\n');
  #             core.setFailed(`Blocking: ${offenders.length} Critical CodeQL alert(s).\n${lines}`);
  #           } else {
  #             core.info('OK: no Critical CodeQL alerts on this ref.');
  #           }

  # # DEPENDENCY SCAN (govulncheck)
  # dep-scan:
  #   needs: sast-codeql
  #   name: Govulncheck (${{ matrix.service.name }})
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       service:
  #         - { name: ta-service,           path: ta_service }
  #         - { name: user-service,         path: user_service }
  #         - { name: document-service,     path: document_service }
  #         - { name: notification-service, path: notification_service }

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     # Gate + simpan laporan TEXT
  #     - name: Govulncheck (gate + save text report)
  #       uses: golang/govulncheck-action@v1
  #       with:
  #         go-version-input: ${{ env.GO_VERSION }}         
  #         work-dir: ${{ matrix.service.path }}             
  #         go-package: ./...                                
  #         output-format: text                              
  #         output-file: ${{ matrix.service.name }}-govulncheck.txt
  #         repo-checkout: false
  #         cache: true
  #         cache-dependency-path: ${{ matrix.service.path }}/go.sum

  #     # Arsipkan laporan TEXT
  #     - name: Upload govulncheck report (artifact)
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: govulncheck-${{ matrix.service.name }}
  #         path: ${{ matrix.service.name }}-govulncheck.txt

  # # IMAGE SCAN (trivy)
  # image-scan:
  #   needs: dep-scan
  #   name: Image Scan (${{ matrix.service.name }})
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       service:
  #         - { name: ta-service,           path: ta_service,           dockerfile: ta_service/Dockerfile }
  #         - { name: user-service,         path: user_service,         dockerfile: user_service/Dockerfile }
  #         - { name: document-service,     path: document_service,     dockerfile: document_service/Dockerfile }
  #         - { name: notification-service, path: notification_service, dockerfile: notification_service/Dockerfile }
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Build image (local daemon)
  #       run: |
  #         docker build \
  #           -f "${{ matrix.service.dockerfile }}" \
  #           -t "${{ matrix.service.name }}:scan" \
  #           "${{ matrix.service.path }}"

  #     - name: Trivy Image scan (gate)
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: ${{ matrix.service.name }}:scan
  #         format: table
  #         vuln-type: os,library
  #         ignore-unfixed: true
  #         severity: CRITICAL      
  #         exit-code: '1'          
  #         hide-progress: true
  #         timeout: 10m

  # Build Image ()
  build-ta-service:
    # needs: image-scan
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/ta-service -f ta_service/Dockerfile ta_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/ta-service

  build-user-service:
    # needs: image-scan
    name: Build User Service Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/user-service -f user_service/Dockerfile user_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/user-service

  build-document-service:
    # needs: image-scan
    name: Build Document Service Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/document-service -f document_service/Dockerfile document_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/document-service

  build-notification-service:
    # needs: image-scan
    name: Build Notification Service Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/notification-service -f notification_service/Dockerfile notification_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/notification-service

  # Deploy ke lingkungan sementara
  deploy-ta-service:
    needs: build-ta-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop ta-service || true && docker rm ta-service || true
            docker system prune -af
            docker pull smgxv/ta-service
            docker run -d -p 8084:8084 --name ta-service smgxv/ta-service
            docker network connect simta_net ta-service

  deploy-user-service:
    needs: build-user-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy User Service to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop user-service || true && docker rm user-service || true
            docker system prune -af
            docker pull smgxv/user-service
            docker run -d -p 8081:8081 --name user-service smgxv/user-service
            docker network connect simta_net user-service

  deploy-document-service:
    needs: build-document-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Document Service to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop document-service || true && docker rm document-service || true
            docker system prune -af
            docker pull smgxv/document-service
            docker run -d -p 8082:8082 --name document-service smgxv/document-service
            docker network connect simta_net document-service

  deploy-notification-service:
    needs: build-notification-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Notification Service to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop notification-service || true && docker rm notification-service || true
            docker system prune -af
            docker pull smgxv/notification-service
            docker run -d -p 8083:8083 --name notification-service -v /home/youruser/uploads:/app/uploads smgxv/notification-service
            docker network connect simta_net notification-service

  # # SAST - SONARCLOUD
  # sast-analysis:
  #   name: SAST dengan SonarCloud
  #   needs: 
  #     - deploy-ta-service
  #     # - deploy-user-service
  #     # - deploy-document-service
  #     # - deploy-notification-service
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Set up Java 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@v2
  #       with:
  #         projectBaseDir: .
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
#  # DAST - OWASP ZAP untuk /taruna/dashboard
#   zap-dast-taruna:
#     needs: sast-analysis
#     runs-on: ubuntu-latest
#     steps:
#       - name: Pull ZAP image (GHCR)
#         run: docker pull ghcr.io/zaproxy/zaproxy:stable

#       - name: Run ZAP Quick Scan and generate HTML report
#         run: |
#           set -euo pipefail
#           mkdir -p zap-out

#           # Jalankan tanpa --rm agar bisa docker cp reportnya
#           docker rm -f zaprun 2>/dev/null || true
#           docker run --name zaprun \
#             ghcr.io/zaproxy/zaproxy:stable \
#               zap.sh -cmd \
#                 -addonupdate \
#                 -addoninstall quickstart,report \
#                 -config log.level=DEBUG \
#                 -quickurl "http://104.43.89.154:8085/taruna/dashboard" \
#                 -quickprogress \
#                 -quickout "/home/zap/.ZAP/reports/zap-report.html"

#           # Simpan log & ambil report dari dalam container
#           docker logs zaprun > zap-out/zap.log || true
#           docker cp zaprun:/home/zap/.ZAP/reports/zap-report.html zap-out/zap-report.html || true

#           echo "== Files in zap-out =="
#           ls -lah zap-out

#           # Bersihkan container
#           docker rm -f zaprun || true

#       - name: Upload HTML report
#         uses: actions/upload-artifact@v4
#         with:
#           name: zaptaruna${{ github.run_id }}   # lowercase + angka saja
#           path: |
#             zap-out/zap-report.html
#             zap-out/zap.log
#           if-no-files-found: error

#   # DAST - OWASP ZAP untuk /dosen/dashboard
#   zap-dast-dosen:
#     needs: sast-analysis
#     runs-on: ubuntu-latest
#     steps:
#       - name: Pull ZAP image (GHCR)
#         run: docker pull ghcr.io/zaproxy/zaproxy:stable

#       - name: Run ZAP Quick Scan and generate HTML report
#         run: |
#           set -euo pipefail
#           mkdir -p zap-out
#           docker rm -f zaprun 2>/dev/null || true
#           docker run --name zaprun \
#             ghcr.io/zaproxy/zaproxy:stable \
#               zap.sh -cmd \
#                 -addonupdate \
#                 -addoninstall quickstart,report \
#                 -config log.level=DEBUG \
#                 -quickurl "http://104.43.89.154:8085/dosen/dashboard" \
#                 -quickprogress \
#                 -quickout "/home/zap/.ZAP/reports/zap-report.html"

#           # Simpan log & ambil report dari dalam container
#           docker logs zaprun > zap-out/zap.log || true
#           docker cp zaprun:/home/zap/.ZAP/reports/zap-report.html zap-out/zap-report.html || true

#           echo "== Files in zap-out =="
#           ls -lah zap-out

#           # Bersihkan container
#           docker rm -f zaprun || true

#       - name: Upload HTML report
#         uses: actions/upload-artifact@v4
#         with:
#           name: zapdosen${{ github.run_id }}
#           path: |
#             zap-out/zap-report.html
#             zap-out/zap.log
#           if-no-files-found: error

#   # DAST - OWASP ZAP untuk /admin/dashboard
#   zap-dast-admin:
#     needs: sast-analysis
#     runs-on: ubuntu-latest
#     steps:
#       - name: Pull ZAP image (GHCR)
#         run: docker pull ghcr.io/zaproxy/zaproxy:stable

#       - name: Run ZAP Quick Scan and generate HTML report
#         run: |
#           set -euo pipefail
#           mkdir -p zap-out

#           # Jalankan tanpa --rm agar bisa docker cp reportnya
#           docker rm -f zaprun 2>/dev/null || true
#           docker run --name zaprun \
#             ghcr.io/zaproxy/zaproxy:stable \
#               zap.sh -cmd \
#                 -addonupdate \
#                 -addoninstall quickstart,report \
#                 -config log.level=DEBUG \
#                 -quickurl "http://104.43.89.154:8085/admin/dashboard" \
#                 -quickprogress \
#                 -quickout "/home/zap/.ZAP/reports/zap-report.html"

#           # Simpan log & ambil report dari dalam container
#           docker logs zaprun > zap-out/zap.log || true
#           docker cp zaprun:/home/zap/.ZAP/reports/zap-report.html zap-out/zap-report.html || true

#           echo "== Files in zap-out =="
#           ls -lah zap-out

#           # Bersihkan container
#           docker rm -f zaprun || true

#       - name: Upload HTML report
#         uses: actions/upload-artifact@v4
#         with:
#           name: zapadmin${{ github.run_id }}
#           path: |
#             zap-out/zap-report.html
#             zap-out/zap.log
#           if-no-files-found: error